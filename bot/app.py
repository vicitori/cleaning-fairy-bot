from datetime import datetime, time, timedelta
import pytz
import os

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler, 
    JobQueue
)
from telegram.error import BadRequest
import nest_asyncio
nest_asyncio.apply()

TOKEN = "7163266270:AAHiO2VqNdY7KPdn7MA_YIKKAt4KkQ-mfdQ"

START_CHOICE, GET_COUNT, GET_NAMES, CONFIRM_NAMES, HANDLE_ORDER, EDIT_MENU, ADD_MEMBER, REMOVE_MEMBER, REORDER_MEMBERS = range(9)

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['CHAT_ID'] = update.effective_chat.id
    
    hello_keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–Ω–∞–ª–∏!", callback_data="start_now"), 
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ—é —Ç–µ–±—è –ø–æ–∑–∂–µ", callback_data="start_later")]
    ]

    await update.message.reply_text(
        "‚ú® *–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –§–µ—è –£–±–æ—Ä–∫–∏!* ‚ú®\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=InlineKeyboardMarkup(hello_keyboard),
        parse_mode="Markdown"
    )

    return START_CHOICE

async def handle_start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "start_now":
        count_keyboard = [[
            InlineKeyboardButton("1", callback_data="1"),
            InlineKeyboardButton("2", callback_data="2"),
            InlineKeyboardButton("3", callback_data="3"),
            InlineKeyboardButton("4", callback_data="4"),
            InlineKeyboardButton("5", callback_data="5"),
            InlineKeyboardButton("6", callback_data="6")
        ]]

        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n"
            "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —É–±–æ—Ä–∫–µ?",
            reply_markup=InlineKeyboardMarkup(count_keyboard),
            parse_mode="Markdown"
        )
        return GET_COUNT
    else:
        await query.edit_message_text(
            "–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏, "
            "–≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hello —Å–Ω–æ–≤–∞.\n\n"
            "–î–æ –Ω–æ–≤—ã—Ö —á–∏—Å—Ç—ã—Ö –≤—Å—Ç—Ä–µ—á! ‚ú®",
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    
async def get_member_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    member_cnt = int(query.data)

    context.user_data["MEMBER_COUNT"] = member_cnt 
    context.user_data['MEMBERS'] = {}
    context.user_data['BUFFER_MSG'] = None

    msg = await query.edit_message_text(
        "üìù *–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:*\n\n"
        "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç...\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏: {member_cnt}",
        parse_mode="Markdown"
    )

    context.user_data['MSG_BUFFER'] = msg

    return GET_NAMES

async def get_member_names(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    context.user_data['MEMBERS'][name] = 0
    
    names_list = "\n".join(f"‚ñ™ {name}" for name in context.user_data['MEMBERS'])

    rest_cnt = context.user_data['MEMBER_COUNT'] - len(context.user_data['MEMBERS'])

    await context.user_data['MSG_BUFFER'].edit_text(
        f"üìù *–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:*\n\n"
        f"{names_list}\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏: {rest_cnt}",
        parse_mode="Markdown"
    )

    try:
        await update.message.delete()
    except:
        pass

    if len(context.user_data['MEMBERS']) >= context.user_data['MEMBER_COUNT']:
        context.user_data['CURRENT_POSITION'] = 1
        try:
            await update.message.delete()
        except:
            pass

        confirm_keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="no")]
        ]
        names_text = "\n".join(f"‚ñ™ {n}" for n in context.user_data['MEMBERS'])
        await context.bot.send_message(
            chat_id=context.user_data['CHAT_ID'],
            text=f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n{names_text}",
            reply_markup=InlineKeyboardMarkup(confirm_keyboard),
            parse_mode="Markdown"
        )
        return CONFIRM_NAMES
    return GET_NAMES

async def confirm_names(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "yes":
        try:
            await query.message.delete()
        except:
            pass

        return await setup_order(update, context)

    else:
        try:
            await query.message.delete()
        except:
            pass

        context.user_data['MEMBERS'] = {}
        context.user_data['CURRENT_POSITION'] = 1

        if 'MSG_BUFFER' in context.user_data:
            try:
                await context.user_data['MSG_BUFFER'].delete()
                del context.user_data['MSG_BUFFER']
            except:
                pass

        msg = await context.bot.send_message(
            chat_id=context.user_data['CHAT_ID'],
            text="*–°–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω.*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:",
            parse_mode="Markdown"
        )
        context.user_data['MSG_BUFFER'] = msg

        return GET_NAMES

async def setup_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'BUFFER_MSG' in context.user_data:
        try:
            await context.user_data['BUFFER_MSG'].delete()
        except:
            pass
    member_keyboard = []
    for name in context.user_data['MEMBERS']:
        if context.user_data['MEMBERS'][name] == 0:
            member_keyboard.append([InlineKeyboardButton(
                f"{name}", 
                callback_data=f"{name}"
            )])

    member_keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="done"), InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="reset")])
    
    current_order = []
    for name, pos in sorted(
        context.user_data['MEMBERS'].items(), 
        key=lambda x: x[1] if x[1] > 0 else float('inf')
    ):
        if pos > 0:
            current_order.append(f"{pos}. {name}")
        else:
            current_order.append(f"‚ûñ {name}")
    ordered_list = "\n".join(current_order)
    
    msg = await context.bot.send_message(
        chat_id=context.user_data['CHAT_ID'],
        text=f"üî¢ *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —É–±–æ—Ä–∫–∏:*\n\n"
             f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n{ordered_list}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç —É–±–∏—Ä–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º:",
        reply_markup=InlineKeyboardMarkup(member_keyboard),
        parse_mode="Markdown"
    )

    context.user_data['BUFFER_MSG'] = msg
    return HANDLE_ORDER

async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        if any(pos == 0 for pos in context.user_data['MEMBERS'].values()):
            await query.answer("–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!", show_alert=True)
            return HANDLE_ORDER
            
        sorted_names = sorted(context.user_data['MEMBERS'].items(), key=lambda x: x[1])
        ordered_list = "\n".join(f"{pos}. {name}" for name, pos in sorted_names)
        
        try:
            await query.message.delete()
        except:
            pass

        await context.bot.send_message(
            chat_id=context.user_data['CHAT_ID'],
            text=f"‚ú® *–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!* ‚ú®\n\n"
                 f"–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å:\n{ordered_list}\n\n"
                 "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, —á—å—è –æ—á–µ—Ä–µ–¥—å –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –±–ª–æ–∫–µ :)\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "/edit - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
                 "/schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
                 "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            parse_mode="Markdown"
        )
        
        now = datetime.now()
        context.user_data['NEXT_MONDAY'] = now + timedelta(days=(7 - now.weekday()) % 7)
        context.user_data['NEXT_MONDAY'] = context.user_data['NEXT_MONDAY'].replace(hour=9, minute=0, second=0, microsecond=0)

        delay = (context.user_data['NEXT_MONDAY'] - now).total_seconds()

        members = context.user_data['MEMBERS']
        job_data = {
            'chat_id': context.user_data['CHAT_ID'],
            'members': members,
            'current_index': 0
        }

        context.job_queue.run_repeating(
            send_weekly_reminder,
            interval=7 * 24 * 60 * 60,  # —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
            first=delay,
            data=job_data,
            name="weekly_cleaning_reminder"
        )

        return ConversationHandler.END
    
    elif query.data == "reset":
        for name in context.user_data['MEMBERS']:
            context.user_data['MEMBERS'][name] = 0
        context.user_data['CURRENT_POSITION'] = 1
        
        await query.answer("–ü–æ—Ä—è–¥–æ–∫ —Å–±—Ä–æ—à–µ–Ω!")
        return await setup_order(update, context)
    
    else:
        context.user_data['MEMBERS'][query.data] = context.user_data['CURRENT_POSITION']
        context.user_data['CURRENT_POSITION'] += 1
        return await setup_order(update, context)

async def send_weekly_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data['chat_id']
    members = job.data['members']
    curr_week_num = job.data['curr_week_num']

    names = list(members.keys())
    current_name = names[curr_week_num % len(names)]

    await context.bot.send_message(
        chat_id=chat_id,
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º—ã –≤ —Ç–≥
        text=f"üßπ *–≠—Ç–æ —Å–Ω–æ–≤–∞ –§–µ—è –£–±–æ—Ä–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º :)* \n\n"
             f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–≤–æ–¥–∏—Ç **{current_name}**\n"
             "–ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ –º–æ—ë–º —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏.",
        parse_mode="Markdown"
    )

    job.data['curr_week_num'] += 1

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'MEMBERS' not in context.user_data or not context.user_data['MEMBERS']:
        await update.message.reply_text("‚ùå –ì—Ä–∞—Ñ–∏–∫ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    members = context.user_data['MEMBERS']
    ordered = sorted(members.items(), key=lambda x: x[1])

    start_date = context.user_data.get('SCHEDULE_START_DATE')
    if not start_date:
        start_date = datetime.now(pytz.utc).date()
        context.user_data['SCHEDULE_START_DATE'] = start_date

    today = datetime.now(pytz.utc).date()
    delta_days = (today - start_date).days
    week_number = delta_days // 7
    current_index = (week_number) % len(members)

    schedule_lines = []
    for i, (name, _) in enumerate(ordered):
        week_offset = i - current_index
        date = today + timedelta(days=-(delta_days % 7)) + timedelta(weeks=week_offset)
        status = "üëâ" if i == current_index else ""
        schedule_lines.append(f"{status} {i+1}. {name} ‚Äî {date.strftime('%d.%m.%Y')}")

    schedule_text = "\n".join(schedule_lines)

    await update.message.reply_text(
        "üìÖ *–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å –¥–∞—Ç–∞–º–∏:*\n\n" + schedule_text,
        parse_mode="Markdown"
    )

async def edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'MEMBERS' not in context.user_data or not context.user_data['MEMBERS']:
        await update.message.reply_text("–ì—Ä–∞—Ñ–∏–∫–∞ —É–±–æ—Ä–∫–∏ –Ω–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /hello")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="add")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="remove")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å", callback_data="reorder")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üõ†Ô∏è *–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞*", reply_markup=reply_markup, parse_mode="Markdown")
    return EDIT_MENU

async def edit_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add":
        msg = await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")
        context.user_data["EDIT_MODE"] = "ADD"
        return ADD_MEMBER

    elif query.data == "remove":
        keyboard = []
        for name in context.user_data['MEMBERS']:
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {name}", callback_data=f"remove_{name}")])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")])

        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REMOVE_MEMBER

    elif query.data == "reorder":
        names = list(context.user_data['MEMBERS'].keys())
        keyboard = []
        for i, name in enumerate(names):
            pos = i + 1
            keyboard.append([InlineKeyboardButton(f"{pos}. {name}", callback_data=f"reorder_{i}")])

        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REORDER_MEMBERS

    elif query.data == "back":
        await query.edit_message_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END

async def add_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if name in context.user_data['MEMBERS']:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å!")
        return ADD_MEMBER

    context.user_data['MEMBERS'][name] = 0
    context.user_data['MEMBER_COUNT'] += 1

    await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ *{name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="Markdown")

    context.user_data['CURRENT_POSITION'] += 1
    return await setup_order(update, context)

async def remove_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    name_to_remove = query.data.replace("remove_", "")
    del context.user_data['MEMBERS'][name_to_remove]
    context.user_data['MEMBER_COUNT'] -= 1

    await query.edit_message_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ *{name_to_remove}* —É–¥–∞–ª—ë–Ω.")

    context.user_data['CURRENT_POSITION'] = 1
    return await setup_order(update, context)

async def reorder_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.replace("reorder_", ""))
    names = list(context.user_data['MEMBERS'].keys())
    name = names[index]

    context.user_data['REORDER_INDEX'] = index

    keyboard = []
    for i in range(1, len(names) + 1):
        keyboard.append([InlineKeyboardButton(str(i), callback_data=f"new_pos_{i}")])

    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: **{name}**", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return REORDER_MEMBERS

async def reorder_members_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    new_pos = int(query.data.replace("new_pos_", ""))
    names = list(context.user_data['MEMBERS'].keys())
    old_index = context.user_data.get('REORDER_INDEX', 0)
    name = names[old_index]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è
    del names[old_index]
    names.insert(new_pos - 1, name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    for i, n in enumerate(names):
        context.user_data['MEMBERS'][n] = i + 1

    await query.edit_message_text(f"‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å *{name}* –Ω–∞ {new_pos}-–º –º–µ—Å—Ç–µ.", parse_mode="Markdown")
    return await setup_order(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/edit ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å –¥–∞—Ç–∞–º–∏\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/cancel ‚Äî –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
    )

    await update.effective_message.reply_text(help_text, parse_mode="Markdown")

    
def main() -> None:
    job_queue = JobQueue()

    application = Application.builder().token(TOKEN).job_queue(job_queue).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("hello", hello),
            CommandHandler("edit", edit_menu),
            CommandHandler("schedule", show_schedule)
        ],
        states={
            START_CHOICE: [CallbackQueryHandler(handle_start_choice)],
            GET_COUNT: [CallbackQueryHandler(get_member_count)],
            GET_NAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_member_names)],
            CONFIRM_NAMES: [CallbackQueryHandler(confirm_names)],
            HANDLE_ORDER: [CallbackQueryHandler(handle_order)],

            EDIT_MENU: [CallbackQueryHandler(edit_menu_handler)],
            ADD_MEMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_member)],
            REMOVE_MEMBER: [CallbackQueryHandler(remove_member)],
            REORDER_MEMBERS: [
                CallbackQueryHandler(reorder_members, pattern=r"^reorder_\d+$"),
                CallbackQueryHandler(reorder_members_set, pattern=r"^new_pos_\d+$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel)
        ]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help))

    job_queue.start()
    application.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 5000)),
    webhook_url="https://your-app-name.scalingo.io/" + TOKEN
)

if __name__ == "__main__":
    main()  
