from datetime import datetime, timedelta
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
import asyncio
from config_reader import config
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token.get_secret_value())

dp = Dispatcher()

class Form(StatesGroup):
    start_choice = State()
    get_count = State()
    get_names = State()
    confirm_names = State()
    handle_order = State()
    edit_menu = State()
    add_member = State()
    remove_member = State()
    reorder_members = State()

user_data = {}

async def send_weekly_reminder(chat_id: int, members: dict, current_index: int):
    names = list(members.keys())
    current_name = names[current_index % len(names)]
    
    await bot.send_message(
        chat_id=chat_id,
        text=f"üßπ {hbold('–≠—Ç–æ —Å–Ω–æ–≤–∞ –§–µ—è –£–±–æ—Ä–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º :)')}\n\n"
             f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–≤–æ–¥–∏—Ç {hbold(current_name)}\n"
             "–ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ –º–æ—ë–º —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏."
    )

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_data[message.chat.id] = {
        'chat_id': message.chat.id,
        'members': {},
        'buffer_msg': None
    }
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–ü–æ–≥–Ω–∞–ª–∏!", callback_data="start_now"),
        types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ—é —Ç–µ–±—è –ø–æ–∑–∂–µ", callback_data="start_later")
    )
    
    await message.answer(
        f"‚ú® {hbold('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –§–µ—è –£–±–æ—Ä–∫–∏!')} ‚ú®\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(Form.start_choice)

@dp.callback_query(Form.start_choice, F.data == "start_now")
async def handle_start_now(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for i in range(1, 7):
        builder.add(types.InlineKeyboardButton(text=str(i), callback_data=str(i)))
    builder.adjust(3)
    
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n"
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —É–±–æ—Ä–∫–µ?",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(Form.get_count)

@dp.callback_query(Form.start_choice, F.data == "start_later")
async def handle_start_later(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏, "
        "–≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hello —Å–Ω–æ–≤–∞.\n\n"
        "–î–æ –Ω–æ–≤—ã—Ö —á–∏—Å—Ç—ã—Ö –≤—Å—Ç—Ä–µ—á! ‚ú®"
    )
    await state.clear()

@dp.callback_query(Form.get_count)
async def get_member_count(callback: types.CallbackQuery, state: FSMContext):
    member_cnt = int(callback.data)
    user_data[callback.message.chat.id]['member_count'] = member_cnt
    user_data[callback.message.chat.id]['current_position'] = 1
    
    msg = await callback.message.edit_text(
        f"üìù {hbold('–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:')}\n\n"
        "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç...\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏: {member_cnt}"
    )
    
    user_data[callback.message.chat.id]['msg_buffer'] = msg
    await state.set_state(Form.get_names)

@dp.message(Form.get_names)
async def get_member_names(message: types.Message, state: FSMContext):
    name = message.text.strip()
    chat_id = message.chat.id
    user_data[chat_id]['members'][name] = 0
    
    names_list = "\n".join(f"‚ñ™ {name}" for name in user_data[chat_id]['members'])
    rest_cnt = user_data[chat_id]['member_count'] - len(user_data[chat_id]['members'])
    
    try:
        await user_data[chat_id]['msg_buffer'].edit_text(
            f"üìù {hbold('–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:')}\n\n"
            f"{names_list}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏: {rest_cnt}"
        )
        await message.delete()
    except:
        pass

    if len(user_data[chat_id]['members']) >= user_data[chat_id]['member_count']:
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="yes"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="no")
        )
        
        names_text = "\n".join(f"‚ñ™ {n}" for n in user_data[chat_id]['members'])
        await message.answer(
            f"üìã {hbold('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:')}\n\n{names_text}",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Form.confirm_names)

@dp.callback_query(Form.confirm_names, F.data == "yes")
async def confirm_names_yes(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await setup_order(callback.message.chat.id, state)

@dp.callback_query(Form.confirm_names, F.data == "no")
async def confirm_names_no(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    user_data[chat_id]['members'] = {}
    user_data[chat_id]['current_position'] = 1
    
    try:
        await user_data[chat_id]['msg_buffer'].delete()
    except:
        pass
    
    msg = await callback.message.answer(
        f"{hbold('–°–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω.')}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É:"
    )
    user_data[chat_id]['msg_buffer'] = msg
    await state.set_state(Form.get_names)

async def setup_order(chat_id: int, state: FSMContext):
    try:
        await user_data[chat_id]['buffer_msg'].delete()
    except:
        pass
    
    builder = InlineKeyboardBuilder()
    for name in user_data[chat_id]['members']:
        if user_data[chat_id]['members'][name] == 0:
            builder.add(types.InlineKeyboardButton(text=name, callback_data=name))
    
    builder.adjust(2)
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="done"),
        types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="reset")
    )
    
    current_order = []
    for name, pos in sorted(
        user_data[chat_id]['members'].items(), 
        key=lambda x: x[1] if x[1] > 0 else float('inf')
    ):
        if pos > 0:
            current_order.append(f"{pos}. {name}")
        else:
            current_order.append(f"‚ûñ {name}")
    ordered_list = "\n".join(current_order)
    
    msg = await bot.send_message(
        chat_id=chat_id,
        text=f"üî¢ {hbold('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —É–±–æ—Ä–∫–∏:')}\n\n"
             f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n{ordered_list}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç —É–±–∏—Ä–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º:",
        reply_markup=builder.as_markup()
    )
    
    user_data[chat_id]['buffer_msg'] = msg
    await state.set_state(Form.handle_order)

@dp.callback_query(Form.handle_order, F.data == "done")
async def handle_order_done(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    
    if any(pos == 0 for pos in user_data[chat_id]['members'].values()):
        await callback.answer("–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!", show_alert=True)
        return
    
    sorted_names = sorted(user_data[chat_id]['members'].items(), key=lambda x: x[1])
    ordered_list = "\n".join(f"{pos}. {name}" for name, pos in sorted_names)
    
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(
        f"‚ú® {hbold('–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')} ‚ú®\n\n"
        f"–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å:\n{ordered_list}\n\n"
        "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, —á—å—è –æ—á–µ—Ä–µ–¥—å –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –±–ª–æ–∫–µ :)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/edit - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    
    now = datetime.now(pytz.utc)
    next_monday = now + timedelta(days=(7 - now.weekday()) % 7)
    next_monday = next_monday.replace(hour=9, minute=0, second=0, microsecond=0)
    
    delay = (next_monday - now).total_seconds()
    
    asyncio.create_task(schedule_weekly_reminder(
        chat_id, 
        user_data[chat_id]['members'], 
        delay
    ))
    
    await state.clear()

async def schedule_weekly_reminder(chat_id: int, members: dict, delay: float):
    await asyncio.sleep(delay)
    current_index = 0
    
    while True:
        await send_weekly_reminder(chat_id, members, current_index)
        current_index += 1
        await asyncio.sleep(7 * 24 * 60 * 60)  # Sleep for 1 week

@dp.callback_query(Form.handle_order, F.data == "reset")
async def handle_order_reset(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    for name in user_data[chat_id]['members']:
        user_data[chat_id]['members'][name] = 0
    user_data[chat_id]['current_position'] = 1
    
    await callback.answer("–ü–æ—Ä—è–¥–æ–∫ —Å–±—Ä–æ—à–µ–Ω!")
    await setup_order(chat_id, state)

@dp.callback_query(Form.handle_order)
async def handle_order_select(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    name = callback.data
    user_data[chat_id]['members'][name] = user_data[chat_id]['current_position']
    user_data[chat_id]['current_position'] += 1
    
    await setup_order(chat_id, state)

@dp.message(Command("schedule"))
async def show_schedule(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in user_data or not user_data[chat_id].get('members'):
        await message.answer("‚ùå –ì—Ä–∞—Ñ–∏–∫ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    
    members = user_data[chat_id]['members']
    ordered = sorted(members.items(), key=lambda x: x[1])
    
    start_date = user_data[chat_id].get('schedule_start_date')
    if not start_date:
        start_date = datetime.now(pytz.utc).date()
        user_data[chat_id]['schedule_start_date'] = start_date
    
    today = datetime.now(pytz.utc).date()
    delta_days = (today - start_date).days
    week_number = delta_days // 7
    current_index = (week_number) % len(members)
    
    schedule_lines = []
    for i, (name, _) in enumerate(ordered):
        week_offset = i - current_index
        date = today + timedelta(days=-(delta_days % 7)) + timedelta(weeks=week_offset)
        status = "üëâ" if i == current_index else ""
        schedule_lines.append(f"{status} {i+1}. {name} ‚Äî {date.strftime('%d.%m.%Y')}")
    
    schedule_text = "\n".join(schedule_lines)
    
    await message.answer(f"üìÖ {hbold('–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å –¥–∞—Ç–∞–º–∏:')}\n\n{schedule_text}")

@dp.message(Command("edit"))
async def edit_menu(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if chat_id not in user_data or not user_data[chat_id].get('members'):
        await message.answer("–ì—Ä–∞—Ñ–∏–∫–∞ —É–±–æ—Ä–∫–∏ –Ω–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /hello")
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="add"),
        types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="remove"),
        types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å", callback_data="reorder"),
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
    )
    builder.adjust(1)
    
    await message.answer(
        f"üõ†Ô∏è {hbold('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞')}",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.edit_menu)

@dp.callback_query(Form.edit_menu, F.data == "add")
async def edit_menu_add(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")
    await state.set_state(Form.add_member)

@dp.callback_query(Form.edit_menu, F.data == "remove")
async def edit_menu_remove(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    builder = InlineKeyboardBuilder()
    for name in user_data[chat_id]['members']:
        builder.add(types.InlineKeyboardButton(text=f"üóëÔ∏è {name}", callback_data=f"remove_{name}"))
    builder.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.remove_member)

@dp.callback_query(Form.edit_menu, F.data == "reorder")
async def edit_menu_reorder(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    names = list(user_data[chat_id]['members'].keys())
    builder = InlineKeyboardBuilder()
    for i, name in enumerate(names):
        pos = i + 1
        builder.add(types.InlineKeyboardButton(text=f"{pos}. {name}", callback_data=f"reorder_{i}"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.reorder_members)

@dp.callback_query(Form.edit_menu, F.data == "back")
async def edit_menu_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await state.clear()

@dp.message(Form.add_member)
async def add_member(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    name = message.text.strip()
    
    if name in user_data[chat_id]['members']:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å!")
        return
    
    user_data[chat_id]['members'][name] = 0
    user_data[chat_id]['member_count'] += 1
    user_data[chat_id]['current_position'] += 1
    
    await message.answer(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {hbold(name)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await setup_order(chat_id, state)

@dp.callback_query(Form.remove_member, F.data.startswith("remove_"))
async def remove_member(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    name_to_remove = callback.data.replace("remove_", "")
    
    del user_data[chat_id]['members'][name_to_remove]
    user_data[chat_id]['member_count'] -= 1
    user_data[chat_id]['current_position'] = 1
    
    await callback.message.edit_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {hbold(name_to_remove)} —É–¥–∞–ª—ë–Ω.")
    await setup_order(chat_id, state)

@dp.callback_query(Form.reorder_members, F.data.startswith("reorder_"))
async def reorder_members_select(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    index = int(callback.data.replace("reorder_", ""))
    names = list(user_data[chat_id]['members'].keys())
    name = names[index]
    
    user_data[chat_id]['reorder_index'] = index
    
    builder = InlineKeyboardBuilder()
    for i in range(1, len(names) + 1):
        builder.add(types.InlineKeyboardButton(text=str(i), callback_data=f"new_pos_{i}"))
    builder.adjust(3)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {hbold(name)}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(Form.reorder_members, F.data.startswith("new_pos_"))
async def reorder_members_set(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    new_pos = int(callback.data.replace("new_pos_", ""))
    names = list(user_data[chat_id]['members'].keys())
    old_index = user_data[chat_id].get('reorder_index', 0)
    name = names[old_index]
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è
    del names[old_index]
    names.insert(new_pos - 1, name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    for i, n in enumerate(names):
        user_data[chat_id]['members'][n] = i + 1
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å {hbold(name)} –Ω–∞ {new_pos}-–º –º–µ—Å—Ç–µ."
    )
    await setup_order(chat_id, state)

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        f"üìö {hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')}\n\n"
        "/edit ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å –¥–∞—Ç–∞–º–∏\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/cancel ‚Äî –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    await message.answer(help_text)

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    await message.answer("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
